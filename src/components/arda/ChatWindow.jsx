import React, { useState, useEffect, useRef } from "react";
import { Tooltip } from "react-tooltip";
import ReactMarkdown from "react-markdown";
import gfm from "remark-gfm";
import copy from "clipboard-copy";
import { ReactComponent as GroqLogo } from "../../assets/chatbot/groq-seeklogo.svg";
import { InformationCircleIcon } from "@heroicons/react/24/outline";
import Me from "../../assets/home/Me.png";

const ChatWindow = ({ groq, currentConversation, onConversationUpdate }) => {
  const [message, setMessage] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [charCount, setCharCount] = useState(0);
  const chatEndRef = useRef(null);
  const [rows, setRows] = useState(1);

  const scrollToBottom = () => {
    if (currentConversation.length > 0) {
      chatEndRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  };

  useEffect(scrollToBottom, [currentConversation]);

  const sendMessage = async () => {
    if (message.trim() === "") return;

    const updatedConversation = {
      id: currentConversation.id,
      messages: currentConversation.messages
        ? [...currentConversation.messages, { role: "user", content: message }]
        : [{ role: "user", content: message }],
    };

    onConversationUpdate(updatedConversation);
    setIsTyping(true);

    setMessage("");

    const chatCompletion = await groq.chat.completions.create({
      messages: [
        {
          role: "system",
          content:
            "You will now act and introduce yourself as Arda, A general purpose assistant running on llama3-70b-8192 model via GROQ on Marcus David Alo's portfolio website, You will converse in a way normal everyday people talk like on the streets, or meeting with friends, be natural and casual, dont be afraid to use filler words in conversations, dont be afraid to use word shortcuts, dont use laughs when you laugh, write it how it would sound when laughing like hahaha or haha or whatever, the same goes for other reactions, be polite, respond in the language the person is using to talk to you.",
        },
        ...updatedConversation.messages,
        {
          role: "assistant",
          content:
            "Hello! I'm your Programming Assistant. I am using the llama3-70b-8192 model via GROQ. How may I assist you with your code today?",
        },
        {
          role: "user",
          content: message,
        },
      ],
      model: "llama3-70b-8192",
      temperature: 0.6,
      max_tokens: 8192,
      top_p: 0.75,
    });

    setIsTyping(false);
    const updatedConversationWithResponse = {
      id: updatedConversation.id,
      messages: [
        ...updatedConversation.messages,
        {
          role: "assistant",
          content: chatCompletion.choices[0]?.message?.content || "",
        },
      ],
    };

    onConversationUpdate(updatedConversationWithResponse);
  };

  const handleTextareaChange = (e) => {
    const newValue = e.target.value;
    const newRows = newValue.split("\n").length;
    setRows(newRows);
    setMessage(newValue);
    setCharCount(newValue.length);
  };

  const components = {
    code: ({ node, inline, children, ...props }) => {
      return !inline ? (
        <div className="relative rounded-md shadow-sm font-mono font-normal text-base">
          <button
            className="absolute right-0 top-0 m-2 text-sm text-white bg-indigo-600 hover:bg-indigo-700 rounded px-2 py-1"
            onClick={() => copy(children)}
          >
            Copy
          </button>
          <pre className="p-4 rounded-md bg-gray-800 text-white overflow-auto">
            <code {...props}>{children}</code>
          </pre>
          <p className="text-xs font-mono text-right text-gray-500 pr-2 pb-1">
            This code was generated by AI. Please review properly.
          </p>
        </div>
      ) : (
        <code {...props}>{children}</code>
      );
    },
  };

  useEffect(() => {
    setCharCount(message.length);
  }, [message]);

  return (
    <div className="flex w-full h-screen dark:bg-gray-900">
      <div className="flex flex-col justify-center items-center bg-white dark:bg-gray-950 p-6 rounded-l-2xl w-full">
        <div className="flex justify-start mx-2 mb-2">
          <p className="text-base text-gray-600 dark:text-gray-400 bg-gray-200 dark:bg-gray-800 px-2 rounded-md">
            Powered by{" "}
            <a
              href="https://groq.com/"
              rel="noreferrer noopener"
              target="_blank"
            >
              <GroqLogo
                data-tooltip-id="groqtooltip"
                className="inline h-8 w-8 mx-1 text-black dark:text-white"
              />
              <Tooltip
                id="groqtooltip"
                place="top"
                effect="solid"
                className="max-w-lg rounded-md font-mono"
              >
                This opens a new tab to groq's main site.
              </Tooltip>
            </a>
          </p>
        </div>
        <div className="overflow-x-hidden h-full w-full mb-4">
          {currentConversation.messages.map((response, index) => (
            <div
              key={index}
              className={`flex items-start space-x-3 p-3 m-2 rounded-lg border-b-4 border-r-4 border-indigo-800/50 ${
                response.role === "assistant"
                  ? "bg-indigo-100 text-indigo-800"
                  : "bg-gray-200 dark:bg-gray-800 text-gray-800 dark:text-gray-200"
              }`}
            >
              {response.role === "assistant" && (
                <img
                  src={Me}
                  alt="Your Name"
                  className="h-10 w-10 rounded-full"
                />
              )}
              <ReactMarkdown
                components={components}
                remarkPlugins={[gfm]}
                className="font-semibold text-base flex flex-col max-w-[60vw] md:text-lg"
              >
                {response.content}
              </ReactMarkdown>
            </div>
          ))}
          {isTyping && (
            <div className="typing-animation text-black dark:text-white">
              Arda is typing...
            </div>
          )}
          <div ref={chatEndRef} />
        </div>
        <div className="flex w-full items-center space-x-2">
          <InformationCircleIcon
            data-tooltip-id="disclaimerTooltip"
            className="h-6 w-6 text-gray-700 dark:text-gray-300 cursor-pointer hover:scale-110"
          />
          <Tooltip
            id="disclaimerTooltip"
            place="top"
            effect="solid"
            className="max-w-lg rounded-md font-mono z-40"
          >
            Please Note: This AI Assistant is continuously being refined and may
            occasionally provide inaccurate details about my background and
            professional endeavors. Your understanding is appreciated.
          </Tooltip>
          <div className="flex justify-center items-center relative w-full">
            <div className="flex justify-center items-center relative w-full">
              <div className="w-full bg-white dark:bg-gray-800 text-black dark:text-white flex-1 border border-gray-300 rounded-md overflow-hidden relative">
                <textarea
                  value={message}
                  onChange={handleTextareaChange}
                  onKeyDown={(e) => {
                    if (e.key === "Enter") {
                      if (e.shiftKey) {
                        // Insert newline character at cursor position
                        const cursorPosition = e.target.selectionStart;
                        const newValue = `${e.target.value.substring(
                          0,
                          cursorPosition
                        )}\n${e.target.value.substring(cursorPosition)}`;
                        setMessage(newValue);
                        handleTextareaChange({
                          target: { value: newValue },
                        });
                        e.preventDefault();
                      } else {
                        // Submit the form when Enter is pressed without Shift
                        sendMessage();
                        setCharCount(e.target.value.length);
                      }
                    }
                  }}
                  className="w-full bg-white dark:bg-gray-800 px-2 py-2 outline-none inset-0 border-none resize-none shadow-none"
                  disabled={isTyping}
                  placeholder="Type your message here..."
                  maxLength={12000}
                  autoComplete="on"
                  spellCheck="false"
                  autoCorrect="false"
                  autoCapitalize="false"
                  wrap="hard"
                  rows={rows}
                />
                <p className="absolute bottom-0 right-2 text-sm text-gray-700 dark:text-gray-300">
                  {charCount}/12000
                </p>
              </div>
              <button
                onClick={sendMessage}
                className="inline-flex ml-2 items-center justify-center px-4 py-2 border border-transparent text-base font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
                disabled={isTyping}
              >
                Send
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatWindow;
